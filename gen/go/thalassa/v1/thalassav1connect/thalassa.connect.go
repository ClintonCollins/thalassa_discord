// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: thalassa/v1/thalassa.proto

package thalassav1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "thalassa_discord/gen/go/thalassa/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "thalassa.v1.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServiceGetSongRequestsProcedure is the fully-qualified name of the APIService's
	// GetSongRequests RPC.
	APIServiceGetSongRequestsProcedure = "/thalassa.v1.APIService/GetSongRequests"
	// APIServiceGetCurrentSongPlayingProcedure is the fully-qualified name of the APIService's
	// GetCurrentSongPlaying RPC.
	APIServiceGetCurrentSongPlayingProcedure = "/thalassa.v1.APIService/GetCurrentSongPlaying"
)

// APIServiceClient is a client for the thalassa.v1.APIService service.
type APIServiceClient interface {
	GetSongRequests(context.Context, *connect_go.Request[v1.GetSongRequestsRequest]) (*connect_go.Response[v1.GetSongRequestsResponse], error)
	// rpc AddSongRequest(AddSongRequestRequest) returns (AddSongRequestResponse);
	GetCurrentSongPlaying(context.Context, *connect_go.Request[v1.GetCurrentSongPlayingRequest]) (*connect_go.Response[v1.GetCurrentSongPlayingResponse], error)
}

// NewAPIServiceClient constructs a client for the thalassa.v1.APIService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aPIServiceClient{
		getSongRequests: connect_go.NewClient[v1.GetSongRequestsRequest, v1.GetSongRequestsResponse](
			httpClient,
			baseURL+APIServiceGetSongRequestsProcedure,
			opts...,
		),
		getCurrentSongPlaying: connect_go.NewClient[v1.GetCurrentSongPlayingRequest, v1.GetCurrentSongPlayingResponse](
			httpClient,
			baseURL+APIServiceGetCurrentSongPlayingProcedure,
			opts...,
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	getSongRequests       *connect_go.Client[v1.GetSongRequestsRequest, v1.GetSongRequestsResponse]
	getCurrentSongPlaying *connect_go.Client[v1.GetCurrentSongPlayingRequest, v1.GetCurrentSongPlayingResponse]
}

// GetSongRequests calls thalassa.v1.APIService.GetSongRequests.
func (c *aPIServiceClient) GetSongRequests(ctx context.Context, req *connect_go.Request[v1.GetSongRequestsRequest]) (*connect_go.Response[v1.GetSongRequestsResponse], error) {
	return c.getSongRequests.CallUnary(ctx, req)
}

// GetCurrentSongPlaying calls thalassa.v1.APIService.GetCurrentSongPlaying.
func (c *aPIServiceClient) GetCurrentSongPlaying(ctx context.Context, req *connect_go.Request[v1.GetCurrentSongPlayingRequest]) (*connect_go.Response[v1.GetCurrentSongPlayingResponse], error) {
	return c.getCurrentSongPlaying.CallUnary(ctx, req)
}

// APIServiceHandler is an implementation of the thalassa.v1.APIService service.
type APIServiceHandler interface {
	GetSongRequests(context.Context, *connect_go.Request[v1.GetSongRequestsRequest]) (*connect_go.Response[v1.GetSongRequestsResponse], error)
	// rpc AddSongRequest(AddSongRequestRequest) returns (AddSongRequestResponse);
	GetCurrentSongPlaying(context.Context, *connect_go.Request[v1.GetCurrentSongPlayingRequest]) (*connect_go.Response[v1.GetCurrentSongPlayingResponse], error)
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(APIServiceGetSongRequestsProcedure, connect_go.NewUnaryHandler(
		APIServiceGetSongRequestsProcedure,
		svc.GetSongRequests,
		opts...,
	))
	mux.Handle(APIServiceGetCurrentSongPlayingProcedure, connect_go.NewUnaryHandler(
		APIServiceGetCurrentSongPlayingProcedure,
		svc.GetCurrentSongPlaying,
		opts...,
	))
	return "/thalassa.v1.APIService/", mux
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) GetSongRequests(context.Context, *connect_go.Request[v1.GetSongRequestsRequest]) (*connect_go.Response[v1.GetSongRequestsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("thalassa.v1.APIService.GetSongRequests is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetCurrentSongPlaying(context.Context, *connect_go.Request[v1.GetCurrentSongPlayingRequest]) (*connect_go.Response[v1.GetCurrentSongPlayingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("thalassa.v1.APIService.GetCurrentSongPlaying is not implemented"))
}
