// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file thalassa/v1/thalassa.proto (package thalassa.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message thalassa.v1.Song
 */
export class Song extends Message<Song> {
  /**
   * @generated from field: string song_name = 1;
   */
  songName = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: bool is_stream = 3;
   */
  isStream = false;

  /**
   * @generated from field: string artist = 4;
   */
  artist = "";

  /**
   * @generated from field: string track = 5;
   */
  track = "";

  /**
   * @generated from field: string album = 6;
   */
  album = "";

  /**
   * @generated from field: string thumbnail_url = 7;
   */
  thumbnailUrl = "";

  /**
   * @generated from field: uint32 duration_in_seconds = 8;
   */
  durationInSeconds = 0;

  /**
   * @generated from field: string description = 9;
   */
  description = "";

  /**
   * @generated from field: string platform = 10;
   */
  platform = "";

  /**
   * @generated from field: string id = 11;
   */
  id = "";

  constructor(data?: PartialMessage<Song>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.Song";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "song_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_stream", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "artist", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "track", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "album", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "thumbnail_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "duration_in_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "platform", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Song {
    return new Song().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Song {
    return new Song().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Song {
    return new Song().fromJsonString(jsonString, options);
  }

  static equals(a: Song | PlainMessage<Song> | undefined, b: Song | PlainMessage<Song> | undefined): boolean {
    return proto3.util.equals(Song, a, b);
  }
}

/**
 * @generated from message thalassa.v1.SongRequest
 */
export class SongRequest extends Message<SongRequest> {
  /**
   * @generated from field: string song_name = 1;
   */
  songName = "";

  /**
   * @generated from field: string username_at_time = 2;
   */
  usernameAtTime = "";

  /**
   * @generated from field: string guild_name_at_time = 3;
   */
  guildNameAtTime = "";

  /**
   * @generated from field: google.protobuf.Timestamp requested_at = 4;
   */
  requestedAt?: Timestamp;

  /**
   * @generated from field: bool played = 5;
   */
  played = false;

  /**
   * @generated from field: google.protobuf.Timestamp played_at = 6;
   */
  playedAt?: Timestamp;

  /**
   * @generated from field: thalassa.v1.Song song = 7;
   */
  song?: Song;

  /**
   * @generated from field: int64 id = 8;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string requested_by_user_id = 9;
   */
  requestedByUserId = "";

  constructor(data?: PartialMessage<SongRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.SongRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "song_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username_at_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "guild_name_at_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "requested_at", kind: "message", T: Timestamp },
    { no: 5, name: "played", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "played_at", kind: "message", T: Timestamp },
    { no: 7, name: "song", kind: "message", T: Song },
    { no: 8, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "requested_by_user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SongRequest {
    return new SongRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SongRequest {
    return new SongRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SongRequest {
    return new SongRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SongRequest | PlainMessage<SongRequest> | undefined, b: SongRequest | PlainMessage<SongRequest> | undefined): boolean {
    return proto3.util.equals(SongRequest, a, b);
  }
}

/**
 * @generated from message thalassa.v1.GetSongRequestsRequest
 */
export class GetSongRequestsRequest extends Message<GetSongRequestsRequest> {
  /**
   * @generated from field: string guild_id = 1;
   */
  guildId = "";

  /**
   * @generated from field: string order_by = 2;
   */
  orderBy = "";

  /**
   * @generated from field: bool order_desc = 3;
   */
  orderDesc = false;

  /**
   * @generated from field: int32 limit = 4;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 5;
   */
  offset = 0;

  constructor(data?: PartialMessage<GetSongRequestsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.GetSongRequestsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "order_desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSongRequestsRequest {
    return new GetSongRequestsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSongRequestsRequest {
    return new GetSongRequestsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSongRequestsRequest {
    return new GetSongRequestsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSongRequestsRequest | PlainMessage<GetSongRequestsRequest> | undefined, b: GetSongRequestsRequest | PlainMessage<GetSongRequestsRequest> | undefined): boolean {
    return proto3.util.equals(GetSongRequestsRequest, a, b);
  }
}

/**
 * @generated from message thalassa.v1.GetSongRequestsResponse
 */
export class GetSongRequestsResponse extends Message<GetSongRequestsResponse> {
  /**
   * @generated from field: repeated thalassa.v1.SongRequest song_requests = 1;
   */
  songRequests: SongRequest[] = [];

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  constructor(data?: PartialMessage<GetSongRequestsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.GetSongRequestsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "song_requests", kind: "message", T: SongRequest, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSongRequestsResponse {
    return new GetSongRequestsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSongRequestsResponse {
    return new GetSongRequestsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSongRequestsResponse {
    return new GetSongRequestsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSongRequestsResponse | PlainMessage<GetSongRequestsResponse> | undefined, b: GetSongRequestsResponse | PlainMessage<GetSongRequestsResponse> | undefined): boolean {
    return proto3.util.equals(GetSongRequestsResponse, a, b);
  }
}

/**
 * @generated from message thalassa.v1.AddSongRequestRequest
 */
export class AddSongRequestRequest extends Message<AddSongRequestRequest> {
  /**
   * @generated from field: string guild_id = 1;
   */
  guildId = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<AddSongRequestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.AddSongRequestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddSongRequestRequest {
    return new AddSongRequestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddSongRequestRequest {
    return new AddSongRequestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddSongRequestRequest {
    return new AddSongRequestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddSongRequestRequest | PlainMessage<AddSongRequestRequest> | undefined, b: AddSongRequestRequest | PlainMessage<AddSongRequestRequest> | undefined): boolean {
    return proto3.util.equals(AddSongRequestRequest, a, b);
  }
}

/**
 * @generated from message thalassa.v1.AddSongRequestResponse
 */
export class AddSongRequestResponse extends Message<AddSongRequestResponse> {
  /**
   * @generated from field: thalassa.v1.SongRequest song_request = 1;
   */
  songRequest?: SongRequest;

  constructor(data?: PartialMessage<AddSongRequestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.AddSongRequestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "song_request", kind: "message", T: SongRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddSongRequestResponse {
    return new AddSongRequestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddSongRequestResponse {
    return new AddSongRequestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddSongRequestResponse {
    return new AddSongRequestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddSongRequestResponse | PlainMessage<AddSongRequestResponse> | undefined, b: AddSongRequestResponse | PlainMessage<AddSongRequestResponse> | undefined): boolean {
    return proto3.util.equals(AddSongRequestResponse, a, b);
  }
}

/**
 * @generated from message thalassa.v1.GetCurrentSongPlayingRequest
 */
export class GetCurrentSongPlayingRequest extends Message<GetCurrentSongPlayingRequest> {
  /**
   * @generated from field: string guild_id = 1;
   */
  guildId = "";

  constructor(data?: PartialMessage<GetCurrentSongPlayingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.GetCurrentSongPlayingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentSongPlayingRequest {
    return new GetCurrentSongPlayingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentSongPlayingRequest {
    return new GetCurrentSongPlayingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentSongPlayingRequest {
    return new GetCurrentSongPlayingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentSongPlayingRequest | PlainMessage<GetCurrentSongPlayingRequest> | undefined, b: GetCurrentSongPlayingRequest | PlainMessage<GetCurrentSongPlayingRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentSongPlayingRequest, a, b);
  }
}

/**
 * @generated from message thalassa.v1.GetCurrentSongPlayingResponse
 */
export class GetCurrentSongPlayingResponse extends Message<GetCurrentSongPlayingResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp requested_at = 1;
   */
  requestedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 2;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: thalassa.v1.Song song = 3;
   */
  song?: Song;

  /**
   * @generated from field: string requested_by = 4;
   */
  requestedBy = "";

  /**
   * @generated from field: thalassa.v1.SongRequest song_request = 5;
   */
  songRequest?: SongRequest;

  constructor(data?: PartialMessage<GetCurrentSongPlayingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.GetCurrentSongPlayingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requested_at", kind: "message", T: Timestamp },
    { no: 2, name: "started_at", kind: "message", T: Timestamp },
    { no: 3, name: "song", kind: "message", T: Song },
    { no: 4, name: "requested_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "song_request", kind: "message", T: SongRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentSongPlayingResponse {
    return new GetCurrentSongPlayingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentSongPlayingResponse {
    return new GetCurrentSongPlayingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentSongPlayingResponse {
    return new GetCurrentSongPlayingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentSongPlayingResponse | PlainMessage<GetCurrentSongPlayingResponse> | undefined, b: GetCurrentSongPlayingResponse | PlainMessage<GetCurrentSongPlayingResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentSongPlayingResponse, a, b);
  }
}

/**
 * @generated from message thalassa.v1.SongRequestsUpdateEvent
 */
export class SongRequestsUpdateEvent extends Message<SongRequestsUpdateEvent> {
  /**
   * @generated from field: thalassa.v1.SongRequestsUpdateEvent.EventType event_type = 1;
   */
  eventType = SongRequestsUpdateEvent_EventType.SONG_REQUEST_ADDED;

  /**
   * @generated from field: thalassa.v1.SongRequest song_request = 2;
   */
  songRequest?: SongRequest;

  constructor(data?: PartialMessage<SongRequestsUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.SongRequestsUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_type", kind: "enum", T: proto3.getEnumType(SongRequestsUpdateEvent_EventType) },
    { no: 2, name: "song_request", kind: "message", T: SongRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SongRequestsUpdateEvent {
    return new SongRequestsUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SongRequestsUpdateEvent {
    return new SongRequestsUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SongRequestsUpdateEvent {
    return new SongRequestsUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SongRequestsUpdateEvent | PlainMessage<SongRequestsUpdateEvent> | undefined, b: SongRequestsUpdateEvent | PlainMessage<SongRequestsUpdateEvent> | undefined): boolean {
    return proto3.util.equals(SongRequestsUpdateEvent, a, b);
  }
}

/**
 * @generated from enum thalassa.v1.SongRequestsUpdateEvent.EventType
 */
export enum SongRequestsUpdateEvent_EventType {
  /**
   * @generated from enum value: SONG_REQUEST_ADDED = 0;
   */
  SONG_REQUEST_ADDED = 0,

  /**
   * @generated from enum value: SONG_REQUEST_PLAYING = 1;
   */
  SONG_REQUEST_PLAYING = 1,

  /**
   * @generated from enum value: SONG_REQUEST_FINISHED = 2;
   */
  SONG_REQUEST_FINISHED = 2,

  /**
   * @generated from enum value: SONG_REQUEST_SKIPPED = 3;
   */
  SONG_REQUEST_SKIPPED = 3,

  /**
   * @generated from enum value: SONG_REQUEST_SKIPPED_ALL = 4;
   */
  SONG_REQUEST_SKIPPED_ALL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SongRequestsUpdateEvent_EventType)
proto3.util.setEnumType(SongRequestsUpdateEvent_EventType, "thalassa.v1.SongRequestsUpdateEvent.EventType", [
  { no: 0, name: "SONG_REQUEST_ADDED" },
  { no: 1, name: "SONG_REQUEST_PLAYING" },
  { no: 2, name: "SONG_REQUEST_FINISHED" },
  { no: 3, name: "SONG_REQUEST_SKIPPED" },
  { no: 4, name: "SONG_REQUEST_SKIPPED_ALL" },
]);

/**
 * @generated from message thalassa.v1.SongRequestsUpdateStreamRequest
 */
export class SongRequestsUpdateStreamRequest extends Message<SongRequestsUpdateStreamRequest> {
  /**
   * @generated from field: string guild_id = 1;
   */
  guildId = "";

  constructor(data?: PartialMessage<SongRequestsUpdateStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.SongRequestsUpdateStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "guild_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SongRequestsUpdateStreamRequest {
    return new SongRequestsUpdateStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SongRequestsUpdateStreamRequest {
    return new SongRequestsUpdateStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SongRequestsUpdateStreamRequest {
    return new SongRequestsUpdateStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SongRequestsUpdateStreamRequest | PlainMessage<SongRequestsUpdateStreamRequest> | undefined, b: SongRequestsUpdateStreamRequest | PlainMessage<SongRequestsUpdateStreamRequest> | undefined): boolean {
    return proto3.util.equals(SongRequestsUpdateStreamRequest, a, b);
  }
}

/**
 * @generated from message thalassa.v1.SongRequestsUpdateStreamResponse
 */
export class SongRequestsUpdateStreamResponse extends Message<SongRequestsUpdateStreamResponse> {
  /**
   * @generated from field: thalassa.v1.SongRequestsUpdateEvent event = 1;
   */
  event?: SongRequestsUpdateEvent;

  constructor(data?: PartialMessage<SongRequestsUpdateStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thalassa.v1.SongRequestsUpdateStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: SongRequestsUpdateEvent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SongRequestsUpdateStreamResponse {
    return new SongRequestsUpdateStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SongRequestsUpdateStreamResponse {
    return new SongRequestsUpdateStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SongRequestsUpdateStreamResponse {
    return new SongRequestsUpdateStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SongRequestsUpdateStreamResponse | PlainMessage<SongRequestsUpdateStreamResponse> | undefined, b: SongRequestsUpdateStreamResponse | PlainMessage<SongRequestsUpdateStreamResponse> | undefined): boolean {
    return proto3.util.equals(SongRequestsUpdateStreamResponse, a, b);
  }
}

