// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRolePermissions(t *testing.T) {
	t.Parallel()

	query := RolePermissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRolePermissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRolePermissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RolePermissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRolePermissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RolePermissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRolePermissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RolePermissionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RolePermission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RolePermissionExists to return true, but got false.")
	}
}

func testRolePermissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rolePermissionFound, err := FindRolePermission(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rolePermissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRolePermissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RolePermissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRolePermissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RolePermissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRolePermissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rolePermissionOne := &RolePermission{}
	rolePermissionTwo := &RolePermission{}
	if err = randomize.Struct(seed, rolePermissionOne, rolePermissionDBTypes, false, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}
	if err = randomize.Struct(seed, rolePermissionTwo, rolePermissionDBTypes, false, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rolePermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rolePermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RolePermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRolePermissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rolePermissionOne := &RolePermission{}
	rolePermissionTwo := &RolePermission{}
	if err = randomize.Struct(seed, rolePermissionOne, rolePermissionDBTypes, false, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}
	if err = randomize.Struct(seed, rolePermissionTwo, rolePermissionDBTypes, false, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rolePermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rolePermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rolePermissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func rolePermissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RolePermission) error {
	*o = RolePermission{}
	return nil
}

func testRolePermissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RolePermission{}
	o := &RolePermission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RolePermission object: %s", err)
	}

	AddRolePermissionHook(boil.BeforeInsertHook, rolePermissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rolePermissionBeforeInsertHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.AfterInsertHook, rolePermissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rolePermissionAfterInsertHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.AfterSelectHook, rolePermissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rolePermissionAfterSelectHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.BeforeUpdateHook, rolePermissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rolePermissionBeforeUpdateHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.AfterUpdateHook, rolePermissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rolePermissionAfterUpdateHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.BeforeDeleteHook, rolePermissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rolePermissionBeforeDeleteHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.AfterDeleteHook, rolePermissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rolePermissionAfterDeleteHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.BeforeUpsertHook, rolePermissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rolePermissionBeforeUpsertHooks = []RolePermissionHook{}

	AddRolePermissionHook(boil.AfterUpsertHook, rolePermissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rolePermissionAfterUpsertHooks = []RolePermissionHook{}
}

func testRolePermissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRolePermissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rolePermissionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRolePermissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRolePermissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RolePermissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRolePermissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RolePermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rolePermissionDBTypes = map[string]string{`ID`: `bigint`, `GuildID`: `text`, `RoleID`: `text`, `PostLinks`: `boolean`, `ModerationMuteMember`: `boolean`, `RollDice`: `boolean`, `FlipCoin`: `boolean`, `RandomImage`: `boolean`, `UseCustomCommands`: `boolean`, `ManageCustomCommands`: `boolean`, `IgnoreCommandThrottle`: `boolean`, `PlaySongs`: `boolean`, `PlayLists`: `boolean`, `SkipSongs`: `boolean`}
	_                     = bytes.MinRead
)

func testRolePermissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(rolePermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rolePermissionAllColumns) == len(rolePermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRolePermissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rolePermissionAllColumns) == len(rolePermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RolePermission{}
	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rolePermissionDBTypes, true, rolePermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rolePermissionAllColumns, rolePermissionPrimaryKeyColumns) {
		fields = rolePermissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			rolePermissionAllColumns,
			rolePermissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RolePermissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRolePermissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(rolePermissionAllColumns) == len(rolePermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RolePermission{}
	if err = randomize.Struct(seed, &o, rolePermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RolePermission: %s", err)
	}

	count, err := RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rolePermissionDBTypes, false, rolePermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RolePermission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RolePermission: %s", err)
	}

	count, err = RolePermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
