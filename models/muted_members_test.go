// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMutedMembers(t *testing.T) {
	t.Parallel()

	query := MutedMembers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMutedMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMutedMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MutedMembers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMutedMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MutedMemberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMutedMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MutedMemberExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MutedMember exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MutedMemberExists to return true, but got false.")
	}
}

func testMutedMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mutedMemberFound, err := FindMutedMember(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mutedMemberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMutedMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MutedMembers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMutedMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MutedMembers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMutedMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mutedMemberOne := &MutedMember{}
	mutedMemberTwo := &MutedMember{}
	if err = randomize.Struct(seed, mutedMemberOne, mutedMemberDBTypes, false, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}
	if err = randomize.Struct(seed, mutedMemberTwo, mutedMemberDBTypes, false, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mutedMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mutedMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MutedMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMutedMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mutedMemberOne := &MutedMember{}
	mutedMemberTwo := &MutedMember{}
	if err = randomize.Struct(seed, mutedMemberOne, mutedMemberDBTypes, false, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}
	if err = randomize.Struct(seed, mutedMemberTwo, mutedMemberDBTypes, false, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mutedMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mutedMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mutedMemberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func mutedMemberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MutedMember) error {
	*o = MutedMember{}
	return nil
}

func testMutedMembersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MutedMember{}
	o := &MutedMember{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MutedMember object: %s", err)
	}

	AddMutedMemberHook(boil.BeforeInsertHook, mutedMemberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mutedMemberBeforeInsertHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.AfterInsertHook, mutedMemberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mutedMemberAfterInsertHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.AfterSelectHook, mutedMemberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mutedMemberAfterSelectHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.BeforeUpdateHook, mutedMemberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mutedMemberBeforeUpdateHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.AfterUpdateHook, mutedMemberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mutedMemberAfterUpdateHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.BeforeDeleteHook, mutedMemberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mutedMemberBeforeDeleteHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.AfterDeleteHook, mutedMemberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mutedMemberAfterDeleteHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.BeforeUpsertHook, mutedMemberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mutedMemberBeforeUpsertHooks = []MutedMemberHook{}

	AddMutedMemberHook(boil.AfterUpsertHook, mutedMemberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mutedMemberAfterUpsertHooks = []MutedMemberHook{}
}

func testMutedMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMutedMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mutedMemberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMutedMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMutedMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MutedMemberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMutedMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MutedMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mutedMemberDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `text`, `GuildID`: `text`, `CreatedAt`: `timestamp without time zone`, `ExpiresAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testMutedMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mutedMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mutedMemberAllColumns) == len(mutedMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMutedMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mutedMemberAllColumns) == len(mutedMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MutedMember{}
	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mutedMemberDBTypes, true, mutedMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mutedMemberAllColumns, mutedMemberPrimaryKeyColumns) {
		fields = mutedMemberAllColumns
	} else {
		fields = strmangle.SetComplement(
			mutedMemberAllColumns,
			mutedMemberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MutedMemberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMutedMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(mutedMemberAllColumns) == len(mutedMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MutedMember{}
	if err = randomize.Struct(seed, &o, mutedMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MutedMember: %s", err)
	}

	count, err := MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mutedMemberDBTypes, false, mutedMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MutedMember struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MutedMember: %s", err)
	}

	count, err = MutedMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
