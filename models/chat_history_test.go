// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChatHistories(t *testing.T) {
	t.Parallel()

	query := ChatHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChatHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ChatHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChatHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChatHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ChatHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChatHistoryExists to return true, but got false.")
	}
}

func testChatHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chatHistoryFound, err := FindChatHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if chatHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChatHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ChatHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChatHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ChatHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChatHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chatHistoryOne := &ChatHistory{}
	chatHistoryTwo := &ChatHistory{}
	if err = randomize.Struct(seed, chatHistoryOne, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, chatHistoryTwo, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chatHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChatHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChatHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chatHistoryOne := &ChatHistory{}
	chatHistoryTwo := &ChatHistory{}
	if err = randomize.Struct(seed, chatHistoryOne, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, chatHistoryTwo, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chatHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chatHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func chatHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func chatHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChatHistory) error {
	*o = ChatHistory{}
	return nil
}

func testChatHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ChatHistory{}
	o := &ChatHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ChatHistory object: %s", err)
	}

	AddChatHistoryHook(boil.BeforeInsertHook, chatHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chatHistoryBeforeInsertHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.AfterInsertHook, chatHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chatHistoryAfterInsertHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.AfterSelectHook, chatHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chatHistoryAfterSelectHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.BeforeUpdateHook, chatHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chatHistoryBeforeUpdateHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.AfterUpdateHook, chatHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chatHistoryAfterUpdateHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.BeforeDeleteHook, chatHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chatHistoryBeforeDeleteHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.AfterDeleteHook, chatHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chatHistoryAfterDeleteHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.BeforeUpsertHook, chatHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chatHistoryBeforeUpsertHooks = []ChatHistoryHook{}

	AddChatHistoryHook(boil.AfterUpsertHook, chatHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chatHistoryAfterUpsertHooks = []ChatHistoryHook{}
}

func testChatHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chatHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChatHistoryToOneDiscordServerUsingGuild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ChatHistory
	var foreign DiscordServer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, discordServerDBTypes, false, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuildID = foreign.GuildID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guild().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GuildID != foreign.GuildID {
		t.Errorf("want: %v, got %v", foreign.GuildID, check.GuildID)
	}

	slice := ChatHistorySlice{&local}
	if err = local.L.LoadGuild(ctx, tx, false, (*[]*ChatHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guild = nil
	if err = local.L.LoadGuild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChatHistoryToOneSetOpDiscordServerUsingGuild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ChatHistory
	var b, c DiscordServer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chatHistoryDBTypes, false, strmangle.SetComplement(chatHistoryPrimaryKeyColumns, chatHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DiscordServer{&b, &c} {
		err = a.SetGuild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guild != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GuildChatHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuildID != x.GuildID {
			t.Error("foreign key was wrong value", a.GuildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuildID))
		reflect.Indirect(reflect.ValueOf(&a.GuildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuildID != x.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, x.GuildID)
		}
	}
}

func testChatHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChatHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChatHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChatHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChatHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chatHistoryDBTypes = map[string]string{`ID`: `bigint`, `UserID`: `text`, `UsernameAtTime`: `text`, `GuildID`: `text`, `GuildNameAtTime`: `text`, `GuildChannelID`: `text`, `GuildChannelNameAtTime`: `text`, `MessageID`: `text`}
	_                  = bytes.MinRead
)

func testChatHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chatHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chatHistoryAllColumns) == len(chatHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChatHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chatHistoryAllColumns) == len(chatHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChatHistory{}
	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chatHistoryDBTypes, true, chatHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chatHistoryAllColumns, chatHistoryPrimaryKeyColumns) {
		fields = chatHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			chatHistoryAllColumns,
			chatHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChatHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChatHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(chatHistoryAllColumns) == len(chatHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ChatHistory{}
	if err = randomize.Struct(seed, &o, chatHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChatHistory: %s", err)
	}

	count, err := ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chatHistoryDBTypes, false, chatHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChatHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChatHistory: %s", err)
	}

	count, err = ChatHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
