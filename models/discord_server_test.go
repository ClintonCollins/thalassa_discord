// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiscordServers(t *testing.T) {
	t.Parallel()

	query := DiscordServers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiscordServersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscordServersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DiscordServers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscordServersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscordServerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscordServersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiscordServerExists(ctx, tx, o.GuildID)
	if err != nil {
		t.Errorf("Unable to check if DiscordServer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiscordServerExists to return true, but got false.")
	}
}

func testDiscordServersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	discordServerFound, err := FindDiscordServer(ctx, tx, o.GuildID)
	if err != nil {
		t.Error(err)
	}

	if discordServerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiscordServersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DiscordServers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiscordServersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DiscordServers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiscordServersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	discordServerOne := &DiscordServer{}
	discordServerTwo := &DiscordServer{}
	if err = randomize.Struct(seed, discordServerOne, discordServerDBTypes, false, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}
	if err = randomize.Struct(seed, discordServerTwo, discordServerDBTypes, false, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discordServerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discordServerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiscordServers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiscordServersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	discordServerOne := &DiscordServer{}
	discordServerTwo := &DiscordServer{}
	if err = randomize.Struct(seed, discordServerOne, discordServerDBTypes, false, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}
	if err = randomize.Struct(seed, discordServerTwo, discordServerDBTypes, false, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discordServerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discordServerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func discordServerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func discordServerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscordServer) error {
	*o = DiscordServer{}
	return nil
}

func testDiscordServersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DiscordServer{}
	o := &DiscordServer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, discordServerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiscordServer object: %s", err)
	}

	AddDiscordServerHook(boil.BeforeInsertHook, discordServerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	discordServerBeforeInsertHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.AfterInsertHook, discordServerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	discordServerAfterInsertHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.AfterSelectHook, discordServerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	discordServerAfterSelectHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.BeforeUpdateHook, discordServerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	discordServerBeforeUpdateHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.AfterUpdateHook, discordServerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	discordServerAfterUpdateHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.BeforeDeleteHook, discordServerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	discordServerBeforeDeleteHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.AfterDeleteHook, discordServerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	discordServerAfterDeleteHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.BeforeUpsertHook, discordServerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	discordServerBeforeUpsertHooks = []DiscordServerHook{}

	AddDiscordServerHook(boil.AfterUpsertHook, discordServerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	discordServerAfterUpsertHooks = []DiscordServerHook{}
}

func testDiscordServersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscordServersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(discordServerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscordServerToManyGuildChatHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscordServer
	var b, c ChatHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chatHistoryDBTypes, false, chatHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GuildID = a.GuildID
	c.GuildID = a.GuildID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GuildChatHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GuildID == b.GuildID {
			bFound = true
		}
		if v.GuildID == c.GuildID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiscordServerSlice{&a}
	if err = a.L.LoadGuildChatHistories(ctx, tx, false, (*[]*DiscordServer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GuildChatHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GuildChatHistories = nil
	if err = a.L.LoadGuildChatHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GuildChatHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiscordServerToManyGuildCustomCommands(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscordServer
	var b, c CustomCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, customCommandDBTypes, false, customCommandColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, customCommandDBTypes, false, customCommandColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GuildID = a.GuildID
	c.GuildID = a.GuildID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GuildCustomCommands().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GuildID == b.GuildID {
			bFound = true
		}
		if v.GuildID == c.GuildID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiscordServerSlice{&a}
	if err = a.L.LoadGuildCustomCommands(ctx, tx, false, (*[]*DiscordServer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GuildCustomCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GuildCustomCommands = nil
	if err = a.L.LoadGuildCustomCommands(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GuildCustomCommands); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiscordServerToManyGuildSongRequests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscordServer
	var b, c SongRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GuildID = a.GuildID
	c.GuildID = a.GuildID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GuildSongRequests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GuildID == b.GuildID {
			bFound = true
		}
		if v.GuildID == c.GuildID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiscordServerSlice{&a}
	if err = a.L.LoadGuildSongRequests(ctx, tx, false, (*[]*DiscordServer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GuildSongRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GuildSongRequests = nil
	if err = a.L.LoadGuildSongRequests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GuildSongRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiscordServerToManyAddOpGuildChatHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscordServer
	var b, c, d, e ChatHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChatHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chatHistoryDBTypes, false, strmangle.SetComplement(chatHistoryPrimaryKeyColumns, chatHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChatHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGuildChatHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GuildID != first.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, first.GuildID)
		}
		if a.GuildID != second.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, second.GuildID)
		}

		if first.R.Guild != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Guild != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GuildChatHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GuildChatHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GuildChatHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDiscordServerToManyAddOpGuildCustomCommands(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscordServer
	var b, c, d, e CustomCommand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CustomCommand{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, customCommandDBTypes, false, strmangle.SetComplement(customCommandPrimaryKeyColumns, customCommandColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CustomCommand{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGuildCustomCommands(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GuildID != first.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, first.GuildID)
		}
		if a.GuildID != second.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, second.GuildID)
		}

		if first.R.Guild != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Guild != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GuildCustomCommands[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GuildCustomCommands[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GuildCustomCommands().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDiscordServerToManyAddOpGuildSongRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscordServer
	var b, c, d, e SongRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SongRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, songRequestDBTypes, false, strmangle.SetComplement(songRequestPrimaryKeyColumns, songRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SongRequest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGuildSongRequests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.GuildID != first.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, first.GuildID)
		}
		if a.GuildID != second.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, second.GuildID)
		}

		if first.R.Guild != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Guild != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GuildSongRequests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GuildSongRequests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GuildSongRequests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDiscordServersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscordServersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscordServerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscordServersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiscordServers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	discordServerDBTypes = map[string]string{`GuildID`: `text`, `GuildName`: `text`, `LinkRemovalEnabled`: `boolean`, `MusicEnabled`: `boolean`, `CustomCommandsEnabled`: `boolean`, `DiceRollEnabled`: `boolean`, `PrefixCommand`: `text`, `MusicTextChannelID`: `text`, `MusicVoiceChannelID`: `text`, `MusicVolume`: `real`, `AnnounceSongs`: `boolean`, `ThrottleCommandsEnabled`: `boolean`, `ThrottleCommandsSeconds`: `bigint`, `WelcomeMessageEnabled`: `boolean`, `WelcomeMessage`: `text`}
	_                    = bytes.MinRead
)

func testDiscordServersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(discordServerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(discordServerAllColumns) == len(discordServerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiscordServersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(discordServerAllColumns) == len(discordServerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiscordServer{}
	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discordServerDBTypes, true, discordServerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(discordServerAllColumns, discordServerPrimaryKeyColumns) {
		fields = discordServerAllColumns
	} else {
		fields = strmangle.SetComplement(
			discordServerAllColumns,
			discordServerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiscordServerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiscordServersUpsert(t *testing.T) {
	t.Parallel()

	if len(discordServerAllColumns) == len(discordServerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DiscordServer{}
	if err = randomize.Struct(seed, &o, discordServerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiscordServer: %s", err)
	}

	count, err := DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, discordServerDBTypes, false, discordServerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiscordServer: %s", err)
	}

	count, err = DiscordServers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
