// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RolePermission is an object representing the database table.
type RolePermission struct {
	ID                    int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	GuildID               string `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	RoleID                string `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	PostLinks             bool   `boil:"post_links" json:"post_links" toml:"post_links" yaml:"post_links"`
	ModerationMuteMember  bool   `boil:"moderation_mute_member" json:"moderation_mute_member" toml:"moderation_mute_member" yaml:"moderation_mute_member"`
	RollDice              bool   `boil:"roll_dice" json:"roll_dice" toml:"roll_dice" yaml:"roll_dice"`
	FlipCoin              bool   `boil:"flip_coin" json:"flip_coin" toml:"flip_coin" yaml:"flip_coin"`
	RandomImage           bool   `boil:"random_image" json:"random_image" toml:"random_image" yaml:"random_image"`
	UseCustomCommands     bool   `boil:"use_custom_commands" json:"use_custom_commands" toml:"use_custom_commands" yaml:"use_custom_commands"`
	ManageCustomCommands  bool   `boil:"manage_custom_commands" json:"manage_custom_commands" toml:"manage_custom_commands" yaml:"manage_custom_commands"`
	IgnoreCommandThrottle bool   `boil:"ignore_command_throttle" json:"ignore_command_throttle" toml:"ignore_command_throttle" yaml:"ignore_command_throttle"`
	PlaySongs             bool   `boil:"play_songs" json:"play_songs" toml:"play_songs" yaml:"play_songs"`
	PlayLists             bool   `boil:"play_lists" json:"play_lists" toml:"play_lists" yaml:"play_lists"`
	SkipSongs             bool   `boil:"skip_songs" json:"skip_songs" toml:"skip_songs" yaml:"skip_songs"`

	R *rolePermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rolePermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RolePermissionColumns = struct {
	ID                    string
	GuildID               string
	RoleID                string
	PostLinks             string
	ModerationMuteMember  string
	RollDice              string
	FlipCoin              string
	RandomImage           string
	UseCustomCommands     string
	ManageCustomCommands  string
	IgnoreCommandThrottle string
	PlaySongs             string
	PlayLists             string
	SkipSongs             string
}{
	ID:                    "id",
	GuildID:               "guild_id",
	RoleID:                "role_id",
	PostLinks:             "post_links",
	ModerationMuteMember:  "moderation_mute_member",
	RollDice:              "roll_dice",
	FlipCoin:              "flip_coin",
	RandomImage:           "random_image",
	UseCustomCommands:     "use_custom_commands",
	ManageCustomCommands:  "manage_custom_commands",
	IgnoreCommandThrottle: "ignore_command_throttle",
	PlaySongs:             "play_songs",
	PlayLists:             "play_lists",
	SkipSongs:             "skip_songs",
}

// Generated where

var RolePermissionWhere = struct {
	ID                    whereHelperint64
	GuildID               whereHelperstring
	RoleID                whereHelperstring
	PostLinks             whereHelperbool
	ModerationMuteMember  whereHelperbool
	RollDice              whereHelperbool
	FlipCoin              whereHelperbool
	RandomImage           whereHelperbool
	UseCustomCommands     whereHelperbool
	ManageCustomCommands  whereHelperbool
	IgnoreCommandThrottle whereHelperbool
	PlaySongs             whereHelperbool
	PlayLists             whereHelperbool
	SkipSongs             whereHelperbool
}{
	ID:                    whereHelperint64{field: "\"role_permission\".\"id\""},
	GuildID:               whereHelperstring{field: "\"role_permission\".\"guild_id\""},
	RoleID:                whereHelperstring{field: "\"role_permission\".\"role_id\""},
	PostLinks:             whereHelperbool{field: "\"role_permission\".\"post_links\""},
	ModerationMuteMember:  whereHelperbool{field: "\"role_permission\".\"moderation_mute_member\""},
	RollDice:              whereHelperbool{field: "\"role_permission\".\"roll_dice\""},
	FlipCoin:              whereHelperbool{field: "\"role_permission\".\"flip_coin\""},
	RandomImage:           whereHelperbool{field: "\"role_permission\".\"random_image\""},
	UseCustomCommands:     whereHelperbool{field: "\"role_permission\".\"use_custom_commands\""},
	ManageCustomCommands:  whereHelperbool{field: "\"role_permission\".\"manage_custom_commands\""},
	IgnoreCommandThrottle: whereHelperbool{field: "\"role_permission\".\"ignore_command_throttle\""},
	PlaySongs:             whereHelperbool{field: "\"role_permission\".\"play_songs\""},
	PlayLists:             whereHelperbool{field: "\"role_permission\".\"play_lists\""},
	SkipSongs:             whereHelperbool{field: "\"role_permission\".\"skip_songs\""},
}

// RolePermissionRels is where relationship names are stored.
var RolePermissionRels = struct {
}{}

// rolePermissionR is where relationships are stored.
type rolePermissionR struct {
}

// NewStruct creates a new relationship struct
func (*rolePermissionR) NewStruct() *rolePermissionR {
	return &rolePermissionR{}
}

// rolePermissionL is where Load methods for each relationship are stored.
type rolePermissionL struct{}

var (
	rolePermissionAllColumns            = []string{"id", "guild_id", "role_id", "post_links", "moderation_mute_member", "roll_dice", "flip_coin", "random_image", "use_custom_commands", "manage_custom_commands", "ignore_command_throttle", "play_songs", "play_lists", "skip_songs"}
	rolePermissionColumnsWithoutDefault = []string{"guild_id", "role_id"}
	rolePermissionColumnsWithDefault    = []string{"id", "post_links", "moderation_mute_member", "roll_dice", "flip_coin", "random_image", "use_custom_commands", "manage_custom_commands", "ignore_command_throttle", "play_songs", "play_lists", "skip_songs"}
	rolePermissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// RolePermissionSlice is an alias for a slice of pointers to RolePermission.
	// This should generally be used opposed to []RolePermission.
	RolePermissionSlice []*RolePermission
	// RolePermissionHook is the signature for custom RolePermission hook methods
	RolePermissionHook func(context.Context, boil.ContextExecutor, *RolePermission) error

	rolePermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rolePermissionType                 = reflect.TypeOf(&RolePermission{})
	rolePermissionMapping              = queries.MakeStructMapping(rolePermissionType)
	rolePermissionPrimaryKeyMapping, _ = queries.BindMapping(rolePermissionType, rolePermissionMapping, rolePermissionPrimaryKeyColumns)
	rolePermissionInsertCacheMut       sync.RWMutex
	rolePermissionInsertCache          = make(map[string]insertCache)
	rolePermissionUpdateCacheMut       sync.RWMutex
	rolePermissionUpdateCache          = make(map[string]updateCache)
	rolePermissionUpsertCacheMut       sync.RWMutex
	rolePermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rolePermissionBeforeInsertHooks []RolePermissionHook
var rolePermissionBeforeUpdateHooks []RolePermissionHook
var rolePermissionBeforeDeleteHooks []RolePermissionHook
var rolePermissionBeforeUpsertHooks []RolePermissionHook

var rolePermissionAfterInsertHooks []RolePermissionHook
var rolePermissionAfterSelectHooks []RolePermissionHook
var rolePermissionAfterUpdateHooks []RolePermissionHook
var rolePermissionAfterDeleteHooks []RolePermissionHook
var rolePermissionAfterUpsertHooks []RolePermissionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RolePermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RolePermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RolePermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RolePermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RolePermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RolePermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RolePermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RolePermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RolePermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rolePermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRolePermissionHook registers your hook function for all future operations.
func AddRolePermissionHook(hookPoint boil.HookPoint, rolePermissionHook RolePermissionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rolePermissionBeforeInsertHooks = append(rolePermissionBeforeInsertHooks, rolePermissionHook)
	case boil.BeforeUpdateHook:
		rolePermissionBeforeUpdateHooks = append(rolePermissionBeforeUpdateHooks, rolePermissionHook)
	case boil.BeforeDeleteHook:
		rolePermissionBeforeDeleteHooks = append(rolePermissionBeforeDeleteHooks, rolePermissionHook)
	case boil.BeforeUpsertHook:
		rolePermissionBeforeUpsertHooks = append(rolePermissionBeforeUpsertHooks, rolePermissionHook)
	case boil.AfterInsertHook:
		rolePermissionAfterInsertHooks = append(rolePermissionAfterInsertHooks, rolePermissionHook)
	case boil.AfterSelectHook:
		rolePermissionAfterSelectHooks = append(rolePermissionAfterSelectHooks, rolePermissionHook)
	case boil.AfterUpdateHook:
		rolePermissionAfterUpdateHooks = append(rolePermissionAfterUpdateHooks, rolePermissionHook)
	case boil.AfterDeleteHook:
		rolePermissionAfterDeleteHooks = append(rolePermissionAfterDeleteHooks, rolePermissionHook)
	case boil.AfterUpsertHook:
		rolePermissionAfterUpsertHooks = append(rolePermissionAfterUpsertHooks, rolePermissionHook)
	}
}

// One returns a single rolePermission record from the query.
func (q rolePermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RolePermission, error) {
	o := &RolePermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_permission")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RolePermission records from the query.
func (q rolePermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (RolePermissionSlice, error) {
	var o []*RolePermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RolePermission slice")
	}

	if len(rolePermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RolePermission records in the query.
func (q rolePermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_permission rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rolePermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_permission exists")
	}

	return count > 0, nil
}

// RolePermissions retrieves all the records using an executor.
func RolePermissions(mods ...qm.QueryMod) rolePermissionQuery {
	mods = append(mods, qm.From("\"role_permission\""))
	return rolePermissionQuery{NewQuery(mods...)}
}

// FindRolePermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRolePermission(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RolePermission, error) {
	rolePermissionObj := &RolePermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_permission\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rolePermissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_permission")
	}

	return rolePermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RolePermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_permission provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rolePermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rolePermissionInsertCacheMut.RLock()
	cache, cached := rolePermissionInsertCache[key]
	rolePermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rolePermissionAllColumns,
			rolePermissionColumnsWithDefault,
			rolePermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rolePermissionType, rolePermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rolePermissionType, rolePermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_permission\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_permission\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_permission")
	}

	if !cached {
		rolePermissionInsertCacheMut.Lock()
		rolePermissionInsertCache[key] = cache
		rolePermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RolePermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RolePermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rolePermissionUpdateCacheMut.RLock()
	cache, cached := rolePermissionUpdateCache[key]
	rolePermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rolePermissionAllColumns,
			rolePermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_permission, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_permission\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rolePermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rolePermissionType, rolePermissionMapping, append(wl, rolePermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_permission row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_permission")
	}

	if !cached {
		rolePermissionUpdateCacheMut.Lock()
		rolePermissionUpdateCache[key] = cache
		rolePermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rolePermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_permission")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RolePermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_permission\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rolePermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rolePermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rolePermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RolePermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_permission provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rolePermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rolePermissionUpsertCacheMut.RLock()
	cache, cached := rolePermissionUpsertCache[key]
	rolePermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rolePermissionAllColumns,
			rolePermissionColumnsWithDefault,
			rolePermissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rolePermissionAllColumns,
			rolePermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert role_permission, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(rolePermissionPrimaryKeyColumns))
			copy(conflict, rolePermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_permission\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(rolePermissionType, rolePermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rolePermissionType, rolePermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert role_permission")
	}

	if !cached {
		rolePermissionUpsertCacheMut.Lock()
		rolePermissionUpsertCache[key] = cache
		rolePermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RolePermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RolePermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RolePermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rolePermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"role_permission\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_permission")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rolePermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rolePermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_permission")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RolePermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rolePermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_permission\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rolePermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rolePermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_permission")
	}

	if len(rolePermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RolePermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRolePermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RolePermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RolePermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rolePermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_permission\".* FROM \"role_permission\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rolePermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RolePermissionSlice")
	}

	*o = slice

	return nil
}

// RolePermissionExists checks if the RolePermission row exists.
func RolePermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_permission\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_permission exists")
	}

	return exists, nil
}
