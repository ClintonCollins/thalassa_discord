// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSongRequests(t *testing.T) {
	t.Parallel()

	query := SongRequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSongRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SongRequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SongRequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSongRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SongRequestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SongRequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SongRequestExists to return true, but got false.")
	}
}

func testSongRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	songRequestFound, err := FindSongRequest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if songRequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSongRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SongRequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSongRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SongRequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSongRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	songRequestOne := &SongRequest{}
	songRequestTwo := &SongRequest{}
	if err = randomize.Struct(seed, songRequestOne, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, songRequestTwo, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = songRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = songRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SongRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSongRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	songRequestOne := &SongRequest{}
	songRequestTwo := &SongRequest{}
	if err = randomize.Struct(seed, songRequestOne, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, songRequestTwo, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = songRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = songRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func songRequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func songRequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SongRequest) error {
	*o = SongRequest{}
	return nil
}

func testSongRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SongRequest{}
	o := &SongRequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, songRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SongRequest object: %s", err)
	}

	AddSongRequestHook(boil.BeforeInsertHook, songRequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	songRequestBeforeInsertHooks = []SongRequestHook{}

	AddSongRequestHook(boil.AfterInsertHook, songRequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	songRequestAfterInsertHooks = []SongRequestHook{}

	AddSongRequestHook(boil.AfterSelectHook, songRequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	songRequestAfterSelectHooks = []SongRequestHook{}

	AddSongRequestHook(boil.BeforeUpdateHook, songRequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	songRequestBeforeUpdateHooks = []SongRequestHook{}

	AddSongRequestHook(boil.AfterUpdateHook, songRequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	songRequestAfterUpdateHooks = []SongRequestHook{}

	AddSongRequestHook(boil.BeforeDeleteHook, songRequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	songRequestBeforeDeleteHooks = []SongRequestHook{}

	AddSongRequestHook(boil.AfterDeleteHook, songRequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	songRequestAfterDeleteHooks = []SongRequestHook{}

	AddSongRequestHook(boil.BeforeUpsertHook, songRequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	songRequestBeforeUpsertHooks = []SongRequestHook{}

	AddSongRequestHook(boil.AfterUpsertHook, songRequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	songRequestAfterUpsertHooks = []SongRequestHook{}
}

func testSongRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(songRequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSongRequestToOneDiscordServerUsingGuild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SongRequest
	var foreign DiscordServer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songRequestDBTypes, false, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, discordServerDBTypes, false, discordServerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscordServer struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuildID = foreign.GuildID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guild().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.GuildID != foreign.GuildID {
		t.Errorf("want: %v, got %v", foreign.GuildID, check.GuildID)
	}

	slice := SongRequestSlice{&local}
	if err = local.L.LoadGuild(ctx, tx, false, (*[]*SongRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guild = nil
	if err = local.L.LoadGuild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongRequestToOneSongUsingSong(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SongRequest
	var foreign Song

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SongID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Song().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SongRequestSlice{&local}
	if err = local.L.LoadSong(ctx, tx, false, (*[]*SongRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Song == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Song = nil
	if err = local.L.LoadSong(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Song == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSongRequestToOneSetOpDiscordServerUsingGuild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SongRequest
	var b, c DiscordServer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songRequestDBTypes, false, strmangle.SetComplement(songRequestPrimaryKeyColumns, songRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discordServerDBTypes, false, strmangle.SetComplement(discordServerPrimaryKeyColumns, discordServerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DiscordServer{&b, &c} {
		err = a.SetGuild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guild != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GuildSongRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuildID != x.GuildID {
			t.Error("foreign key was wrong value", a.GuildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuildID))
		reflect.Indirect(reflect.ValueOf(&a.GuildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuildID != x.GuildID {
			t.Error("foreign key was wrong value", a.GuildID, x.GuildID)
		}
	}
}
func testSongRequestToOneSetOpSongUsingSong(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SongRequest
	var b, c Song

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songRequestDBTypes, false, strmangle.SetComplement(songRequestPrimaryKeyColumns, songRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Song{&b, &c} {
		err = a.SetSong(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Song != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SongRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SongID, x.ID) {
			t.Error("foreign key was wrong value", a.SongID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SongID))
		reflect.Indirect(reflect.ValueOf(&a.SongID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SongID, x.ID) {
			t.Error("foreign key was wrong value", a.SongID, x.ID)
		}
	}
}

func testSongRequestToOneRemoveOpSongUsingSong(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SongRequest
	var b Song

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, songRequestDBTypes, false, strmangle.SetComplement(songRequestPrimaryKeyColumns, songRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSong(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSong(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Song().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Song != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SongID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SongRequests) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSongRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSongRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SongRequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSongRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SongRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	songRequestDBTypes = map[string]string{`ID`: `bigint`, `SongID`: `text`, `SongName`: `text`, `RequestedByUserID`: `text`, `UsernameAtTime`: `text`, `GuildID`: `text`, `GuildNameAtTime`: `text`, `RequestedAt`: `timestamp with time zone`, `PlayedAt`: `timestamp with time zone`, `Played`: `boolean`}
	_                  = bytes.MinRead
)

func testSongRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(songRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(songRequestAllColumns) == len(songRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSongRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(songRequestAllColumns) == len(songRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SongRequest{}
	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, songRequestDBTypes, true, songRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(songRequestAllColumns, songRequestPrimaryKeyColumns) {
		fields = songRequestAllColumns
	} else {
		fields = strmangle.SetComplement(
			songRequestAllColumns,
			songRequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SongRequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSongRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(songRequestAllColumns) == len(songRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SongRequest{}
	if err = randomize.Struct(seed, &o, songRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SongRequest: %s", err)
	}

	count, err := SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, songRequestDBTypes, false, songRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SongRequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SongRequest: %s", err)
	}

	count, err = SongRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
