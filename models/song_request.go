// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// SongRequest is an object representing the database table.
type SongRequest struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SongID            null.String `boil:"song_id" json:"song_id,omitempty" toml:"song_id" yaml:"song_id,omitempty"`
	SongName          string      `boil:"song_name" json:"song_name" toml:"song_name" yaml:"song_name"`
	RequestedByUserID string      `boil:"requested_by_user_id" json:"requested_by_user_id" toml:"requested_by_user_id" yaml:"requested_by_user_id"`
	UsernameAtTime    string      `boil:"username_at_time" json:"username_at_time" toml:"username_at_time" yaml:"username_at_time"`
	GuildID           string      `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	GuildNameAtTime   string      `boil:"guild_name_at_time" json:"guild_name_at_time" toml:"guild_name_at_time" yaml:"guild_name_at_time"`
	RequestedAt       time.Time   `boil:"requested_at" json:"requested_at" toml:"requested_at" yaml:"requested_at"`
	PlayedAt          null.Time   `boil:"played_at" json:"played_at,omitempty" toml:"played_at" yaml:"played_at,omitempty"`
	Played            bool        `boil:"played" json:"played" toml:"played" yaml:"played"`

	R *songRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongRequestColumns = struct {
	ID                string
	SongID            string
	SongName          string
	RequestedByUserID string
	UsernameAtTime    string
	GuildID           string
	GuildNameAtTime   string
	RequestedAt       string
	PlayedAt          string
	Played            string
}{
	ID:                "id",
	SongID:            "song_id",
	SongName:          "song_name",
	RequestedByUserID: "requested_by_user_id",
	UsernameAtTime:    "username_at_time",
	GuildID:           "guild_id",
	GuildNameAtTime:   "guild_name_at_time",
	RequestedAt:       "requested_at",
	PlayedAt:          "played_at",
	Played:            "played",
}

// Generated where

var SongRequestWhere = struct {
	ID                whereHelperint64
	SongID            whereHelpernull_String
	SongName          whereHelperstring
	RequestedByUserID whereHelperstring
	UsernameAtTime    whereHelperstring
	GuildID           whereHelperstring
	GuildNameAtTime   whereHelperstring
	RequestedAt       whereHelpertime_Time
	PlayedAt          whereHelpernull_Time
	Played            whereHelperbool
}{
	ID:                whereHelperint64{field: "\"song_request\".\"id\""},
	SongID:            whereHelpernull_String{field: "\"song_request\".\"song_id\""},
	SongName:          whereHelperstring{field: "\"song_request\".\"song_name\""},
	RequestedByUserID: whereHelperstring{field: "\"song_request\".\"requested_by_user_id\""},
	UsernameAtTime:    whereHelperstring{field: "\"song_request\".\"username_at_time\""},
	GuildID:           whereHelperstring{field: "\"song_request\".\"guild_id\""},
	GuildNameAtTime:   whereHelperstring{field: "\"song_request\".\"guild_name_at_time\""},
	RequestedAt:       whereHelpertime_Time{field: "\"song_request\".\"requested_at\""},
	PlayedAt:          whereHelpernull_Time{field: "\"song_request\".\"played_at\""},
	Played:            whereHelperbool{field: "\"song_request\".\"played\""},
}

// SongRequestRels is where relationship names are stored.
var SongRequestRels = struct {
	Guild string
	Song  string
}{
	Guild: "Guild",
	Song:  "Song",
}

// songRequestR is where relationships are stored.
type songRequestR struct {
	Guild *DiscordServer
	Song  *Song
}

// NewStruct creates a new relationship struct
func (*songRequestR) NewStruct() *songRequestR {
	return &songRequestR{}
}

// songRequestL is where Load methods for each relationship are stored.
type songRequestL struct{}

var (
	songRequestAllColumns            = []string{"id", "song_id", "song_name", "requested_by_user_id", "username_at_time", "guild_id", "guild_name_at_time", "requested_at", "played_at", "played"}
	songRequestColumnsWithoutDefault = []string{"song_id", "song_name", "requested_by_user_id", "username_at_time", "guild_id", "guild_name_at_time", "played_at"}
	songRequestColumnsWithDefault    = []string{"id", "requested_at", "played"}
	songRequestPrimaryKeyColumns     = []string{"id"}
)

type (
	// SongRequestSlice is an alias for a slice of pointers to SongRequest.
	// This should generally be used opposed to []SongRequest.
	SongRequestSlice []*SongRequest
	// SongRequestHook is the signature for custom SongRequest hook methods
	SongRequestHook func(context.Context, boil.ContextExecutor, *SongRequest) error

	songRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songRequestType                 = reflect.TypeOf(&SongRequest{})
	songRequestMapping              = queries.MakeStructMapping(songRequestType)
	songRequestPrimaryKeyMapping, _ = queries.BindMapping(songRequestType, songRequestMapping, songRequestPrimaryKeyColumns)
	songRequestInsertCacheMut       sync.RWMutex
	songRequestInsertCache          = make(map[string]insertCache)
	songRequestUpdateCacheMut       sync.RWMutex
	songRequestUpdateCache          = make(map[string]updateCache)
	songRequestUpsertCacheMut       sync.RWMutex
	songRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var songRequestBeforeInsertHooks []SongRequestHook
var songRequestBeforeUpdateHooks []SongRequestHook
var songRequestBeforeDeleteHooks []SongRequestHook
var songRequestBeforeUpsertHooks []SongRequestHook

var songRequestAfterInsertHooks []SongRequestHook
var songRequestAfterSelectHooks []SongRequestHook
var songRequestAfterUpdateHooks []SongRequestHook
var songRequestAfterDeleteHooks []SongRequestHook
var songRequestAfterUpsertHooks []SongRequestHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SongRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SongRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SongRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SongRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SongRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SongRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SongRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SongRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SongRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongRequestHook registers your hook function for all future operations.
func AddSongRequestHook(hookPoint boil.HookPoint, songRequestHook SongRequestHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		songRequestBeforeInsertHooks = append(songRequestBeforeInsertHooks, songRequestHook)
	case boil.BeforeUpdateHook:
		songRequestBeforeUpdateHooks = append(songRequestBeforeUpdateHooks, songRequestHook)
	case boil.BeforeDeleteHook:
		songRequestBeforeDeleteHooks = append(songRequestBeforeDeleteHooks, songRequestHook)
	case boil.BeforeUpsertHook:
		songRequestBeforeUpsertHooks = append(songRequestBeforeUpsertHooks, songRequestHook)
	case boil.AfterInsertHook:
		songRequestAfterInsertHooks = append(songRequestAfterInsertHooks, songRequestHook)
	case boil.AfterSelectHook:
		songRequestAfterSelectHooks = append(songRequestAfterSelectHooks, songRequestHook)
	case boil.AfterUpdateHook:
		songRequestAfterUpdateHooks = append(songRequestAfterUpdateHooks, songRequestHook)
	case boil.AfterDeleteHook:
		songRequestAfterDeleteHooks = append(songRequestAfterDeleteHooks, songRequestHook)
	case boil.AfterUpsertHook:
		songRequestAfterUpsertHooks = append(songRequestAfterUpsertHooks, songRequestHook)
	}
}

// One returns a single songRequest record from the query.
func (q songRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SongRequest, error) {
	o := &SongRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for song_request")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SongRequest records from the query.
func (q songRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (SongRequestSlice, error) {
	var o []*SongRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SongRequest slice")
	}

	if len(songRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SongRequest records in the query.
func (q songRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count song_request rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q songRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if song_request exists")
	}

	return count > 0, nil
}

// Guild pointed to by the foreign key.
func (o *SongRequest) Guild(mods ...qm.QueryMod) discordServerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guild_id\" = ?", o.GuildID),
	}

	queryMods = append(queryMods, mods...)

	query := DiscordServers(queryMods...)
	queries.SetFrom(query.Query, "\"discord_server\"")

	return query
}

// Song pointed to by the foreign key.
func (o *SongRequest) Song(mods ...qm.QueryMod) songQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SongID),
	}

	queryMods = append(queryMods, mods...)

	query := Songs(queryMods...)
	queries.SetFrom(query.Query, "\"song\"")

	return query
}

// LoadGuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (songRequestL) LoadGuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSongRequest interface{}, mods queries.Applicator) error {
	var slice []*SongRequest
	var object *SongRequest

	if singular {
		object = maybeSongRequest.(*SongRequest)
	} else {
		slice = *maybeSongRequest.(*[]*SongRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songRequestR{}
		}
		args = append(args, object.GuildID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songRequestR{}
			}

			for _, a := range args {
				if a == obj.GuildID {
					continue Outer
				}
			}

			args = append(args, obj.GuildID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`discord_server`), qm.WhereIn(`discord_server.guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DiscordServer")
	}

	var resultSlice []*DiscordServer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DiscordServer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for discord_server")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discord_server")
	}

	if len(songRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guild = foreign
		if foreign.R == nil {
			foreign.R = &discordServerR{}
		}
		foreign.R.GuildSongRequests = append(foreign.R.GuildSongRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuildID == foreign.GuildID {
				local.R.Guild = foreign
				if foreign.R == nil {
					foreign.R = &discordServerR{}
				}
				foreign.R.GuildSongRequests = append(foreign.R.GuildSongRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadSong allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (songRequestL) LoadSong(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSongRequest interface{}, mods queries.Applicator) error {
	var slice []*SongRequest
	var object *SongRequest

	if singular {
		object = maybeSongRequest.(*SongRequest)
	} else {
		slice = *maybeSongRequest.(*[]*SongRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &songRequestR{}
		}
		if !queries.IsNil(object.SongID) {
			args = append(args, object.SongID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songRequestR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SongID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SongID) {
				args = append(args, obj.SongID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`song`), qm.WhereIn(`song.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Song")
	}

	var resultSlice []*Song
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Song")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for song")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for song")
	}

	if len(songRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Song = foreign
		if foreign.R == nil {
			foreign.R = &songR{}
		}
		foreign.R.SongRequests = append(foreign.R.SongRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SongID, foreign.ID) {
				local.R.Song = foreign
				if foreign.R == nil {
					foreign.R = &songR{}
				}
				foreign.R.SongRequests = append(foreign.R.SongRequests, local)
				break
			}
		}
	}

	return nil
}

// SetGuild of the songRequest to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildSongRequests.
func (o *SongRequest) SetGuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DiscordServer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"song_request\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
		strmangle.WhereClause("\"", "\"", 2, songRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.GuildID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuildID = related.GuildID
	if o.R == nil {
		o.R = &songRequestR{
			Guild: related,
		}
	} else {
		o.R.Guild = related
	}

	if related.R == nil {
		related.R = &discordServerR{
			GuildSongRequests: SongRequestSlice{o},
		}
	} else {
		related.R.GuildSongRequests = append(related.R.GuildSongRequests, o)
	}

	return nil
}

// SetSong of the songRequest to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.SongRequests.
func (o *SongRequest) SetSong(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Song) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"song_request\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"song_id"}),
		strmangle.WhereClause("\"", "\"", 2, songRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SongID, related.ID)
	if o.R == nil {
		o.R = &songRequestR{
			Song: related,
		}
	} else {
		o.R.Song = related
	}

	if related.R == nil {
		related.R = &songR{
			SongRequests: SongRequestSlice{o},
		}
	} else {
		related.R.SongRequests = append(related.R.SongRequests, o)
	}

	return nil
}

// RemoveSong relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SongRequest) RemoveSong(ctx context.Context, exec boil.ContextExecutor, related *Song) error {
	var err error

	queries.SetScanner(&o.SongID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("song_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Song = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SongRequests {
		if queries.Equal(o.SongID, ri.SongID) {
			continue
		}

		ln := len(related.R.SongRequests)
		if ln > 1 && i < ln-1 {
			related.R.SongRequests[i] = related.R.SongRequests[ln-1]
		}
		related.R.SongRequests = related.R.SongRequests[:ln-1]
		break
	}
	return nil
}

// SongRequests retrieves all the records using an executor.
func SongRequests(mods ...qm.QueryMod) songRequestQuery {
	mods = append(mods, qm.From("\"song_request\""))
	return songRequestQuery{NewQuery(mods...)}
}

// FindSongRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSongRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SongRequest, error) {
	songRequestObj := &SongRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"song_request\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, songRequestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from song_request")
	}

	return songRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SongRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no song_request provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	songRequestInsertCacheMut.RLock()
	cache, cached := songRequestInsertCache[key]
	songRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			songRequestAllColumns,
			songRequestColumnsWithDefault,
			songRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(songRequestType, songRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songRequestType, songRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"song_request\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"song_request\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into song_request")
	}

	if !cached {
		songRequestInsertCacheMut.Lock()
		songRequestInsertCache[key] = cache
		songRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SongRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SongRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	songRequestUpdateCacheMut.RLock()
	cache, cached := songRequestUpdateCache[key]
	songRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			songRequestAllColumns,
			songRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update song_request, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"song_request\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, songRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songRequestType, songRequestMapping, append(wl, songRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update song_request row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for song_request")
	}

	if !cached {
		songRequestUpdateCacheMut.Lock()
		songRequestUpdateCache[key] = cache
		songRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q songRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for song_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for song_request")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"song_request\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, songRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in songRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all songRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SongRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no song_request provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songRequestUpsertCacheMut.RLock()
	cache, cached := songRequestUpsertCache[key]
	songRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			songRequestAllColumns,
			songRequestColumnsWithDefault,
			songRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			songRequestAllColumns,
			songRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert song_request, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(songRequestPrimaryKeyColumns))
			copy(conflict, songRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"song_request\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(songRequestType, songRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songRequestType, songRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert song_request")
	}

	if !cached {
		songRequestUpsertCacheMut.Lock()
		songRequestUpsertCache[key] = cache
		songRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SongRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SongRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SongRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"song_request\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from song_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for song_request")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q songRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no songRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from song_request")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for song_request")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(songRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"song_request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, songRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from songRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for song_request")
	}

	if len(songRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SongRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSongRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SongRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"song_request\".* FROM \"song_request\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, songRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SongRequestSlice")
	}

	*o = slice

	return nil
}

// SongRequestExists checks if the SongRequest row exists.
func SongRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"song_request\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if song_request exists")
	}

	return exists, nil
}
