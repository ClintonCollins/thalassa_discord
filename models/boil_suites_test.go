// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ChatHistories", testChatHistories)
	t.Run("CustomCommands", testCustomCommands)
	t.Run("DiscordServers", testDiscordServers)
	t.Run("Songs", testSongs)
	t.Run("SongRequests", testSongRequests)
}

func TestDelete(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesDelete)
	t.Run("CustomCommands", testCustomCommandsDelete)
	t.Run("DiscordServers", testDiscordServersDelete)
	t.Run("Songs", testSongsDelete)
	t.Run("SongRequests", testSongRequestsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesQueryDeleteAll)
	t.Run("CustomCommands", testCustomCommandsQueryDeleteAll)
	t.Run("DiscordServers", testDiscordServersQueryDeleteAll)
	t.Run("Songs", testSongsQueryDeleteAll)
	t.Run("SongRequests", testSongRequestsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesSliceDeleteAll)
	t.Run("CustomCommands", testCustomCommandsSliceDeleteAll)
	t.Run("DiscordServers", testDiscordServersSliceDeleteAll)
	t.Run("Songs", testSongsSliceDeleteAll)
	t.Run("SongRequests", testSongRequestsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesExists)
	t.Run("CustomCommands", testCustomCommandsExists)
	t.Run("DiscordServers", testDiscordServersExists)
	t.Run("Songs", testSongsExists)
	t.Run("SongRequests", testSongRequestsExists)
}

func TestFind(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesFind)
	t.Run("CustomCommands", testCustomCommandsFind)
	t.Run("DiscordServers", testDiscordServersFind)
	t.Run("Songs", testSongsFind)
	t.Run("SongRequests", testSongRequestsFind)
}

func TestBind(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesBind)
	t.Run("CustomCommands", testCustomCommandsBind)
	t.Run("DiscordServers", testDiscordServersBind)
	t.Run("Songs", testSongsBind)
	t.Run("SongRequests", testSongRequestsBind)
}

func TestOne(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesOne)
	t.Run("CustomCommands", testCustomCommandsOne)
	t.Run("DiscordServers", testDiscordServersOne)
	t.Run("Songs", testSongsOne)
	t.Run("SongRequests", testSongRequestsOne)
}

func TestAll(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesAll)
	t.Run("CustomCommands", testCustomCommandsAll)
	t.Run("DiscordServers", testDiscordServersAll)
	t.Run("Songs", testSongsAll)
	t.Run("SongRequests", testSongRequestsAll)
}

func TestCount(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesCount)
	t.Run("CustomCommands", testCustomCommandsCount)
	t.Run("DiscordServers", testDiscordServersCount)
	t.Run("Songs", testSongsCount)
	t.Run("SongRequests", testSongRequestsCount)
}

func TestHooks(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesHooks)
	t.Run("CustomCommands", testCustomCommandsHooks)
	t.Run("DiscordServers", testDiscordServersHooks)
	t.Run("Songs", testSongsHooks)
	t.Run("SongRequests", testSongRequestsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesInsert)
	t.Run("ChatHistories", testChatHistoriesInsertWhitelist)
	t.Run("CustomCommands", testCustomCommandsInsert)
	t.Run("CustomCommands", testCustomCommandsInsertWhitelist)
	t.Run("DiscordServers", testDiscordServersInsert)
	t.Run("DiscordServers", testDiscordServersInsertWhitelist)
	t.Run("Songs", testSongsInsert)
	t.Run("Songs", testSongsInsertWhitelist)
	t.Run("SongRequests", testSongRequestsInsert)
	t.Run("SongRequests", testSongRequestsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ChatHistoryToDiscordServerUsingGuild", testChatHistoryToOneDiscordServerUsingGuild)
	t.Run("CustomCommandToDiscordServerUsingGuild", testCustomCommandToOneDiscordServerUsingGuild)
	t.Run("SongRequestToDiscordServerUsingGuild", testSongRequestToOneDiscordServerUsingGuild)
	t.Run("SongRequestToSongUsingSong", testSongRequestToOneSongUsingSong)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DiscordServerToGuildChatHistories", testDiscordServerToManyGuildChatHistories)
	t.Run("DiscordServerToGuildCustomCommands", testDiscordServerToManyGuildCustomCommands)
	t.Run("DiscordServerToGuildSongRequests", testDiscordServerToManyGuildSongRequests)
	t.Run("SongToSongRequests", testSongToManySongRequests)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ChatHistoryToDiscordServerUsingGuildChatHistories", testChatHistoryToOneSetOpDiscordServerUsingGuild)
	t.Run("CustomCommandToDiscordServerUsingGuildCustomCommands", testCustomCommandToOneSetOpDiscordServerUsingGuild)
	t.Run("SongRequestToDiscordServerUsingGuildSongRequests", testSongRequestToOneSetOpDiscordServerUsingGuild)
	t.Run("SongRequestToSongUsingSongRequests", testSongRequestToOneSetOpSongUsingSong)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("SongRequestToSongUsingSongRequests", testSongRequestToOneRemoveOpSongUsingSong)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DiscordServerToGuildChatHistories", testDiscordServerToManyAddOpGuildChatHistories)
	t.Run("DiscordServerToGuildCustomCommands", testDiscordServerToManyAddOpGuildCustomCommands)
	t.Run("DiscordServerToGuildSongRequests", testDiscordServerToManyAddOpGuildSongRequests)
	t.Run("SongToSongRequests", testSongToManyAddOpSongRequests)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("SongToSongRequests", testSongToManySetOpSongRequests)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("SongToSongRequests", testSongToManyRemoveOpSongRequests)
}

func TestReload(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesReload)
	t.Run("CustomCommands", testCustomCommandsReload)
	t.Run("DiscordServers", testDiscordServersReload)
	t.Run("Songs", testSongsReload)
	t.Run("SongRequests", testSongRequestsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesReloadAll)
	t.Run("CustomCommands", testCustomCommandsReloadAll)
	t.Run("DiscordServers", testDiscordServersReloadAll)
	t.Run("Songs", testSongsReloadAll)
	t.Run("SongRequests", testSongRequestsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesSelect)
	t.Run("CustomCommands", testCustomCommandsSelect)
	t.Run("DiscordServers", testDiscordServersSelect)
	t.Run("Songs", testSongsSelect)
	t.Run("SongRequests", testSongRequestsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesUpdate)
	t.Run("CustomCommands", testCustomCommandsUpdate)
	t.Run("DiscordServers", testDiscordServersUpdate)
	t.Run("Songs", testSongsUpdate)
	t.Run("SongRequests", testSongRequestsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ChatHistories", testChatHistoriesSliceUpdateAll)
	t.Run("CustomCommands", testCustomCommandsSliceUpdateAll)
	t.Run("DiscordServers", testDiscordServersSliceUpdateAll)
	t.Run("Songs", testSongsSliceUpdateAll)
	t.Run("SongRequests", testSongRequestsSliceUpdateAll)
}
