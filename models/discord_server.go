// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DiscordServer is an object representing the database table.
type DiscordServer struct {
	GuildID                 string      `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	GuildName               string      `boil:"guild_name" json:"guild_name" toml:"guild_name" yaml:"guild_name"`
	LinkRemovalEnabled      bool        `boil:"link_removal_enabled" json:"link_removal_enabled" toml:"link_removal_enabled" yaml:"link_removal_enabled"`
	MusicEnabled            bool        `boil:"music_enabled" json:"music_enabled" toml:"music_enabled" yaml:"music_enabled"`
	CustomCommandsEnabled   bool        `boil:"custom_commands_enabled" json:"custom_commands_enabled" toml:"custom_commands_enabled" yaml:"custom_commands_enabled"`
	DiceRollEnabled         bool        `boil:"dice_roll_enabled" json:"dice_roll_enabled" toml:"dice_roll_enabled" yaml:"dice_roll_enabled"`
	PrefixCommand           string      `boil:"prefix_command" json:"prefix_command" toml:"prefix_command" yaml:"prefix_command"`
	MusicTextChannelID      null.String `boil:"music_text_channel_id" json:"music_text_channel_id,omitempty" toml:"music_text_channel_id" yaml:"music_text_channel_id,omitempty"`
	MusicVoiceChannelID     null.String `boil:"music_voice_channel_id" json:"music_voice_channel_id,omitempty" toml:"music_voice_channel_id" yaml:"music_voice_channel_id,omitempty"`
	MusicVolume             float32     `boil:"music_volume" json:"music_volume" toml:"music_volume" yaml:"music_volume"`
	AnnounceSongs           bool        `boil:"announce_songs" json:"announce_songs" toml:"announce_songs" yaml:"announce_songs"`
	ThrottleCommandsEnabled bool        `boil:"throttle_commands_enabled" json:"throttle_commands_enabled" toml:"throttle_commands_enabled" yaml:"throttle_commands_enabled"`
	ThrottleCommandsSeconds null.Int64  `boil:"throttle_commands_seconds" json:"throttle_commands_seconds,omitempty" toml:"throttle_commands_seconds" yaml:"throttle_commands_seconds,omitempty"`
	WelcomeMessageEnabled   bool        `boil:"welcome_message_enabled" json:"welcome_message_enabled" toml:"welcome_message_enabled" yaml:"welcome_message_enabled"`
	WelcomeMessage          null.String `boil:"welcome_message" json:"welcome_message,omitempty" toml:"welcome_message" yaml:"welcome_message,omitempty"`

	R *discordServerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discordServerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscordServerColumns = struct {
	GuildID                 string
	GuildName               string
	LinkRemovalEnabled      string
	MusicEnabled            string
	CustomCommandsEnabled   string
	DiceRollEnabled         string
	PrefixCommand           string
	MusicTextChannelID      string
	MusicVoiceChannelID     string
	MusicVolume             string
	AnnounceSongs           string
	ThrottleCommandsEnabled string
	ThrottleCommandsSeconds string
	WelcomeMessageEnabled   string
	WelcomeMessage          string
}{
	GuildID:                 "guild_id",
	GuildName:               "guild_name",
	LinkRemovalEnabled:      "link_removal_enabled",
	MusicEnabled:            "music_enabled",
	CustomCommandsEnabled:   "custom_commands_enabled",
	DiceRollEnabled:         "dice_roll_enabled",
	PrefixCommand:           "prefix_command",
	MusicTextChannelID:      "music_text_channel_id",
	MusicVoiceChannelID:     "music_voice_channel_id",
	MusicVolume:             "music_volume",
	AnnounceSongs:           "announce_songs",
	ThrottleCommandsEnabled: "throttle_commands_enabled",
	ThrottleCommandsSeconds: "throttle_commands_seconds",
	WelcomeMessageEnabled:   "welcome_message_enabled",
	WelcomeMessage:          "welcome_message",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DiscordServerWhere = struct {
	GuildID                 whereHelperstring
	GuildName               whereHelperstring
	LinkRemovalEnabled      whereHelperbool
	MusicEnabled            whereHelperbool
	CustomCommandsEnabled   whereHelperbool
	DiceRollEnabled         whereHelperbool
	PrefixCommand           whereHelperstring
	MusicTextChannelID      whereHelpernull_String
	MusicVoiceChannelID     whereHelpernull_String
	MusicVolume             whereHelperfloat32
	AnnounceSongs           whereHelperbool
	ThrottleCommandsEnabled whereHelperbool
	ThrottleCommandsSeconds whereHelpernull_Int64
	WelcomeMessageEnabled   whereHelperbool
	WelcomeMessage          whereHelpernull_String
}{
	GuildID:                 whereHelperstring{field: "\"discord_server\".\"guild_id\""},
	GuildName:               whereHelperstring{field: "\"discord_server\".\"guild_name\""},
	LinkRemovalEnabled:      whereHelperbool{field: "\"discord_server\".\"link_removal_enabled\""},
	MusicEnabled:            whereHelperbool{field: "\"discord_server\".\"music_enabled\""},
	CustomCommandsEnabled:   whereHelperbool{field: "\"discord_server\".\"custom_commands_enabled\""},
	DiceRollEnabled:         whereHelperbool{field: "\"discord_server\".\"dice_roll_enabled\""},
	PrefixCommand:           whereHelperstring{field: "\"discord_server\".\"prefix_command\""},
	MusicTextChannelID:      whereHelpernull_String{field: "\"discord_server\".\"music_text_channel_id\""},
	MusicVoiceChannelID:     whereHelpernull_String{field: "\"discord_server\".\"music_voice_channel_id\""},
	MusicVolume:             whereHelperfloat32{field: "\"discord_server\".\"music_volume\""},
	AnnounceSongs:           whereHelperbool{field: "\"discord_server\".\"announce_songs\""},
	ThrottleCommandsEnabled: whereHelperbool{field: "\"discord_server\".\"throttle_commands_enabled\""},
	ThrottleCommandsSeconds: whereHelpernull_Int64{field: "\"discord_server\".\"throttle_commands_seconds\""},
	WelcomeMessageEnabled:   whereHelperbool{field: "\"discord_server\".\"welcome_message_enabled\""},
	WelcomeMessage:          whereHelpernull_String{field: "\"discord_server\".\"welcome_message\""},
}

// DiscordServerRels is where relationship names are stored.
var DiscordServerRels = struct {
	GuildChatHistories  string
	GuildCustomCommands string
	GuildSongRequests   string
}{
	GuildChatHistories:  "GuildChatHistories",
	GuildCustomCommands: "GuildCustomCommands",
	GuildSongRequests:   "GuildSongRequests",
}

// discordServerR is where relationships are stored.
type discordServerR struct {
	GuildChatHistories  ChatHistorySlice
	GuildCustomCommands CustomCommandSlice
	GuildSongRequests   SongRequestSlice
}

// NewStruct creates a new relationship struct
func (*discordServerR) NewStruct() *discordServerR {
	return &discordServerR{}
}

// discordServerL is where Load methods for each relationship are stored.
type discordServerL struct{}

var (
	discordServerAllColumns            = []string{"guild_id", "guild_name", "link_removal_enabled", "music_enabled", "custom_commands_enabled", "dice_roll_enabled", "prefix_command", "music_text_channel_id", "music_voice_channel_id", "music_volume", "announce_songs", "throttle_commands_enabled", "throttle_commands_seconds", "welcome_message_enabled", "welcome_message"}
	discordServerColumnsWithoutDefault = []string{"guild_id", "guild_name", "link_removal_enabled", "music_enabled", "custom_commands_enabled", "dice_roll_enabled", "music_text_channel_id", "music_voice_channel_id", "announce_songs", "throttle_commands_enabled", "welcome_message_enabled", "welcome_message"}
	discordServerColumnsWithDefault    = []string{"prefix_command", "music_volume", "throttle_commands_seconds"}
	discordServerPrimaryKeyColumns     = []string{"guild_id"}
)

type (
	// DiscordServerSlice is an alias for a slice of pointers to DiscordServer.
	// This should generally be used opposed to []DiscordServer.
	DiscordServerSlice []*DiscordServer
	// DiscordServerHook is the signature for custom DiscordServer hook methods
	DiscordServerHook func(context.Context, boil.ContextExecutor, *DiscordServer) error

	discordServerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discordServerType                 = reflect.TypeOf(&DiscordServer{})
	discordServerMapping              = queries.MakeStructMapping(discordServerType)
	discordServerPrimaryKeyMapping, _ = queries.BindMapping(discordServerType, discordServerMapping, discordServerPrimaryKeyColumns)
	discordServerInsertCacheMut       sync.RWMutex
	discordServerInsertCache          = make(map[string]insertCache)
	discordServerUpdateCacheMut       sync.RWMutex
	discordServerUpdateCache          = make(map[string]updateCache)
	discordServerUpsertCacheMut       sync.RWMutex
	discordServerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var discordServerBeforeInsertHooks []DiscordServerHook
var discordServerBeforeUpdateHooks []DiscordServerHook
var discordServerBeforeDeleteHooks []DiscordServerHook
var discordServerBeforeUpsertHooks []DiscordServerHook

var discordServerAfterInsertHooks []DiscordServerHook
var discordServerAfterSelectHooks []DiscordServerHook
var discordServerAfterUpdateHooks []DiscordServerHook
var discordServerAfterDeleteHooks []DiscordServerHook
var discordServerAfterUpsertHooks []DiscordServerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscordServer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscordServer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscordServer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscordServer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscordServer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscordServer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscordServer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscordServer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscordServer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discordServerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscordServerHook registers your hook function for all future operations.
func AddDiscordServerHook(hookPoint boil.HookPoint, discordServerHook DiscordServerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		discordServerBeforeInsertHooks = append(discordServerBeforeInsertHooks, discordServerHook)
	case boil.BeforeUpdateHook:
		discordServerBeforeUpdateHooks = append(discordServerBeforeUpdateHooks, discordServerHook)
	case boil.BeforeDeleteHook:
		discordServerBeforeDeleteHooks = append(discordServerBeforeDeleteHooks, discordServerHook)
	case boil.BeforeUpsertHook:
		discordServerBeforeUpsertHooks = append(discordServerBeforeUpsertHooks, discordServerHook)
	case boil.AfterInsertHook:
		discordServerAfterInsertHooks = append(discordServerAfterInsertHooks, discordServerHook)
	case boil.AfterSelectHook:
		discordServerAfterSelectHooks = append(discordServerAfterSelectHooks, discordServerHook)
	case boil.AfterUpdateHook:
		discordServerAfterUpdateHooks = append(discordServerAfterUpdateHooks, discordServerHook)
	case boil.AfterDeleteHook:
		discordServerAfterDeleteHooks = append(discordServerAfterDeleteHooks, discordServerHook)
	case boil.AfterUpsertHook:
		discordServerAfterUpsertHooks = append(discordServerAfterUpsertHooks, discordServerHook)
	}
}

// One returns a single discordServer record from the query.
func (q discordServerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiscordServer, error) {
	o := &DiscordServer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for discord_server")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscordServer records from the query.
func (q discordServerQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiscordServerSlice, error) {
	var o []*DiscordServer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiscordServer slice")
	}

	if len(discordServerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscordServer records in the query.
func (q discordServerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count discord_server rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discordServerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if discord_server exists")
	}

	return count > 0, nil
}

// GuildChatHistories retrieves all the chat_history's ChatHistories with an executor via guild_id column.
func (o *DiscordServer) GuildChatHistories(mods ...qm.QueryMod) chatHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_history\".\"guild_id\"=?", o.GuildID),
	)

	query := ChatHistories(queryMods...)
	queries.SetFrom(query.Query, "\"chat_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chat_history\".*"})
	}

	return query
}

// GuildCustomCommands retrieves all the custom_command's CustomCommands with an executor via guild_id column.
func (o *DiscordServer) GuildCustomCommands(mods ...qm.QueryMod) customCommandQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"custom_command\".\"guild_id\"=?", o.GuildID),
	)

	query := CustomCommands(queryMods...)
	queries.SetFrom(query.Query, "\"custom_command\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"custom_command\".*"})
	}

	return query
}

// GuildSongRequests retrieves all the song_request's SongRequests with an executor via guild_id column.
func (o *DiscordServer) GuildSongRequests(mods ...qm.QueryMod) songRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"song_request\".\"guild_id\"=?", o.GuildID),
	)

	query := SongRequests(queryMods...)
	queries.SetFrom(query.Query, "\"song_request\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"song_request\".*"})
	}

	return query
}

// LoadGuildChatHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discordServerL) LoadGuildChatHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscordServer interface{}, mods queries.Applicator) error {
	var slice []*DiscordServer
	var object *DiscordServer

	if singular {
		object = maybeDiscordServer.(*DiscordServer)
	} else {
		slice = *maybeDiscordServer.(*[]*DiscordServer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discordServerR{}
		}
		args = append(args, object.GuildID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discordServerR{}
			}

			for _, a := range args {
				if a == obj.GuildID {
					continue Outer
				}
			}

			args = append(args, obj.GuildID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`chat_history`), qm.WhereIn(`chat_history.guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_history")
	}

	var resultSlice []*ChatHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_history")
	}

	if len(chatHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GuildChatHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatHistoryR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GuildID == foreign.GuildID {
				local.R.GuildChatHistories = append(local.R.GuildChatHistories, foreign)
				if foreign.R == nil {
					foreign.R = &chatHistoryR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// LoadGuildCustomCommands allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discordServerL) LoadGuildCustomCommands(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscordServer interface{}, mods queries.Applicator) error {
	var slice []*DiscordServer
	var object *DiscordServer

	if singular {
		object = maybeDiscordServer.(*DiscordServer)
	} else {
		slice = *maybeDiscordServer.(*[]*DiscordServer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discordServerR{}
		}
		args = append(args, object.GuildID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discordServerR{}
			}

			for _, a := range args {
				if a == obj.GuildID {
					continue Outer
				}
			}

			args = append(args, obj.GuildID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`custom_command`), qm.WhereIn(`custom_command.guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load custom_command")
	}

	var resultSlice []*CustomCommand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice custom_command")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on custom_command")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for custom_command")
	}

	if len(customCommandAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GuildCustomCommands = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customCommandR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GuildID == foreign.GuildID {
				local.R.GuildCustomCommands = append(local.R.GuildCustomCommands, foreign)
				if foreign.R == nil {
					foreign.R = &customCommandR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// LoadGuildSongRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discordServerL) LoadGuildSongRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscordServer interface{}, mods queries.Applicator) error {
	var slice []*DiscordServer
	var object *DiscordServer

	if singular {
		object = maybeDiscordServer.(*DiscordServer)
	} else {
		slice = *maybeDiscordServer.(*[]*DiscordServer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discordServerR{}
		}
		args = append(args, object.GuildID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discordServerR{}
			}

			for _, a := range args {
				if a == obj.GuildID {
					continue Outer
				}
			}

			args = append(args, obj.GuildID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`song_request`), qm.WhereIn(`song_request.guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load song_request")
	}

	var resultSlice []*SongRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice song_request")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on song_request")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for song_request")
	}

	if len(songRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GuildSongRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &songRequestR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.GuildID == foreign.GuildID {
				local.R.GuildSongRequests = append(local.R.GuildSongRequests, foreign)
				if foreign.R == nil {
					foreign.R = &songRequestR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// AddGuildChatHistories adds the given related objects to the existing relationships
// of the discord_server, optionally inserting them as new records.
// Appends related to o.R.GuildChatHistories.
// Sets related.R.Guild appropriately.
func (o *DiscordServer) AddGuildChatHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChatHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.GuildID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, chatHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.GuildID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.GuildID
		}
	}

	if o.R == nil {
		o.R = &discordServerR{
			GuildChatHistories: related,
		}
	} else {
		o.R.GuildChatHistories = append(o.R.GuildChatHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatHistoryR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// AddGuildCustomCommands adds the given related objects to the existing relationships
// of the discord_server, optionally inserting them as new records.
// Appends related to o.R.GuildCustomCommands.
// Sets related.R.Guild appropriately.
func (o *DiscordServer) AddGuildCustomCommands(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CustomCommand) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.GuildID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"custom_command\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, customCommandPrimaryKeyColumns),
			)
			values := []interface{}{o.GuildID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.GuildID
		}
	}

	if o.R == nil {
		o.R = &discordServerR{
			GuildCustomCommands: related,
		}
	} else {
		o.R.GuildCustomCommands = append(o.R.GuildCustomCommands, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customCommandR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// AddGuildSongRequests adds the given related objects to the existing relationships
// of the discord_server, optionally inserting them as new records.
// Appends related to o.R.GuildSongRequests.
// Sets related.R.Guild appropriately.
func (o *DiscordServer) AddGuildSongRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SongRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.GuildID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"song_request\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, songRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.GuildID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.GuildID
		}
	}

	if o.R == nil {
		o.R = &discordServerR{
			GuildSongRequests: related,
		}
	} else {
		o.R.GuildSongRequests = append(o.R.GuildSongRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &songRequestR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// DiscordServers retrieves all the records using an executor.
func DiscordServers(mods ...qm.QueryMod) discordServerQuery {
	mods = append(mods, qm.From("\"discord_server\""))
	return discordServerQuery{NewQuery(mods...)}
}

// FindDiscordServer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscordServer(ctx context.Context, exec boil.ContextExecutor, guildID string, selectCols ...string) (*DiscordServer, error) {
	discordServerObj := &DiscordServer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"discord_server\" where \"guild_id\"=$1", sel,
	)

	q := queries.Raw(query, guildID)

	err := q.Bind(ctx, exec, discordServerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from discord_server")
	}

	return discordServerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscordServer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discord_server provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discordServerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discordServerInsertCacheMut.RLock()
	cache, cached := discordServerInsertCache[key]
	discordServerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discordServerAllColumns,
			discordServerColumnsWithDefault,
			discordServerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discordServerType, discordServerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discordServerType, discordServerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"discord_server\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"discord_server\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into discord_server")
	}

	if !cached {
		discordServerInsertCacheMut.Lock()
		discordServerInsertCache[key] = cache
		discordServerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DiscordServer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscordServer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discordServerUpdateCacheMut.RLock()
	cache, cached := discordServerUpdateCache[key]
	discordServerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discordServerAllColumns,
			discordServerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update discord_server, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"discord_server\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, discordServerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discordServerType, discordServerMapping, append(wl, discordServerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update discord_server row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for discord_server")
	}

	if !cached {
		discordServerUpdateCacheMut.Lock()
		discordServerUpdateCache[key] = cache
		discordServerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discordServerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for discord_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for discord_server")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscordServerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"discord_server\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, discordServerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in discordServer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all discordServer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscordServer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discord_server provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discordServerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discordServerUpsertCacheMut.RLock()
	cache, cached := discordServerUpsertCache[key]
	discordServerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discordServerAllColumns,
			discordServerColumnsWithDefault,
			discordServerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			discordServerAllColumns,
			discordServerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert discord_server, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(discordServerPrimaryKeyColumns))
			copy(conflict, discordServerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"discord_server\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(discordServerType, discordServerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discordServerType, discordServerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert discord_server")
	}

	if !cached {
		discordServerUpsertCacheMut.Lock()
		discordServerUpsertCache[key] = cache
		discordServerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DiscordServer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscordServer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscordServer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discordServerPrimaryKeyMapping)
	sql := "DELETE FROM \"discord_server\" WHERE \"guild_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from discord_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for discord_server")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discordServerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no discordServerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discord_server")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discord_server")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscordServerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(discordServerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"discord_server\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discordServerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discordServer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discord_server")
	}

	if len(discordServerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscordServer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiscordServer(ctx, exec, o.GuildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscordServerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscordServerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordServerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"discord_server\".* FROM \"discord_server\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discordServerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiscordServerSlice")
	}

	*o = slice

	return nil
}

// DiscordServerExists checks if the DiscordServer row exists.
func DiscordServerExists(ctx context.Context, exec boil.ContextExecutor, guildID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"discord_server\" where \"guild_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if discord_server exists")
	}

	return exists, nil
}
